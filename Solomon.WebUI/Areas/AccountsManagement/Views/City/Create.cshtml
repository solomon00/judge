@model Solomon.WebUI.Areas.AccountsManagement.ViewModels.CreateCityViewModel

@{
    ViewBag.Title = "Создать город";
    Layout = "~/Areas/AccountsManagement/Views/Shared/_Layout.cshtml";
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@section AddToHead
{
        <link href="@Url.Content("~/Content/themes/base/jquery-ui.custom.css")" rel="stylesheet"/>
        <script src="@Url.Content("~/Scripts/jquery-ui-1.10.3.min.js")"></script>
}

<script type="text/javascript">
    $(function () {
        // ********************************************************************
        // Country, city, institution fields
        // 
        var countryID = $("#@Html.IdFor(model => model.CountryID)").val();
        var country = $("#@Html.IdFor(model => model.Country)").val();
        var cityID = $("#@Html.IdFor(model => model.CityID)").val();
        var city = $("#@Html.IdFor(model => model.City)").val();

        $("#@Html.IdFor(model => model.Country)").autocomplete({
            source: '@Url.Action("Country", "Database", new { Area = "", limit = 10 })',
            focus: function (event, ui) {
                $("#@Html.IdFor(model => model.Country)").val(ui.item.label);
                return false;
            },
            select: function (event, ui) {
                country = ui.item.label;
                $("#@Html.IdFor(model => model.Country)").val(country);

                $("#@Html.IdFor(model => model.CountryID)").val(ui.item.value);

                if (countryID != ui.item.value) {
                    countryID = ui.item.value;

                    $("#@Html.IdFor(model => model.City)").autocomplete("option", "source", '@Url.Action("City", "Database", new { Area = "", limit = 40 })&CountryID=' + countryID);
                    
                }

                return false;
            },
            change: function (event, ui) {
                if (ui.item == null) {
                    if ($("#@Html.IdFor(model => model.Country)").val() != "") {
                        $("#@Html.IdFor(model => model.Country)").val(country);
                    }
                    else {
                        $("#@Html.IdFor(model => model.City)").autocomplete("option", "source", "@Url.Action("City", "Database", new { Area = "", limit = 40 })&CountryID=" + countryID);
                        
                    }
                }
                return false;
            }
        });
        $("#@Html.IdFor(model => model.City)").autocomplete({
            source: '@Url.Action("City", "Database", new { Area = "", limit = 40 })&CountryID=' + countryID,
            focus: function (event, ui) {
                city = ui.item.label.substring(0, ui.item.label.indexOf("<br"));

                if (city.indexOf("<b>") != -1)
                    city = city.substring(city.indexOf("<b>") + 3, city.indexOf("</b>"));
                $("#@Html.IdFor(model => model.City)").val(city);

                if (ui.item.label.indexOf("\">") != -1) {
                    regionArea = ui.item.label.substring(ui.item.label.indexOf("\">") + 2, ui.item.label.indexOf("</span>"));

                    if (regionArea.indexOf(",") != -1) {
                        $("#@Html.IdFor(model => model.Region)").val(regionArea.substring(0, regionArea.indexOf(",")));
                        $("#@Html.IdFor(model => model.Area)").val(regionArea.substring(regionArea.indexOf(", ") + 2));
                    }
                    else {
                        $("#@Html.IdFor(model => model.Region)").val(regionArea);
                    }
                }

                return false;
            },
            select: function (event, ui) {
                city = ui.item.label.substring(0, ui.item.label.indexOf("<br"));
                if (city.indexOf("<b>") != -1)
                    city = city.substring(city.indexOf("<b>") + 3, city.indexOf("</b>"));
                $("#@Html.IdFor(model => model.City)").val(city);

                $("#@Html.IdFor(model => model.CityID)").val(ui.item.value);

                if (ui.item.label.indexOf("\">") != -1) {
                    regionArea = ui.item.label.substring(ui.item.label.indexOf("\">") + 2, ui.item.label.indexOf("</span>"));

                    if (regionArea.indexOf(",") != -1) {
                        $("#@Html.IdFor(model => model.Region)").val(regionArea.substring(0, regionArea.indexOf(",")));
                        $("#@Html.IdFor(model => model.Area)").val(regionArea.substring(regionArea.indexOf(", ") + 2));
                    }
                    else {
                        $("#@Html.IdFor(model => model.Region)").val(regionArea);
                    }
                }

                if (cityID != ui.item.value) {
                    cityID = ui.item.value;
                }
                return false;
            }
        }).data("ui-autocomplete")._renderItem = function (ul, item) {
            return $("<li></li>")
                .data("item.autocomplete", item)
                .append("<a style=\"padding: 0 .4em;\">" + item.label + "</a>")
                .appendTo(ul);
        };
        
        //
        // End country, city, institution fields
        // ********************************************************************
        
        if ('@TempData.Keys.Contains("SuccessMessage")' == 'True') {
            toastr.success('@TempData["SuccessMessage"]');
        }
        else if ('@TempData.Keys.Contains("ErrorMessage")' == 'True') {
            toastr.error('@TempData["ErrorMessage"]');
        }

        $("#@Html.IdFor(model => model.Country)").focus();
    });
</script>

<div id="breadcrumb">
    @Html.ActionLink("Главная", "Index", "Home", new { Area = "AccountsManagement" }, null) > 
    @Html.ActionLink("Города", "Index", "City", new { Area = "AccountsManagement" }, null) > 
    Создать новый
</div>

<h2>Добавление нового города (населенного пунтка)</h2>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>Введите информацию о городе (населенном пунтке)</legend>
        
        <div class="row">
            @Html.LabelFor(model => model.Country)
            @Html.HiddenFor(model => model.CountryID)
            <div class="inputs">
                <span class="input_wrapper">@Html.TextBoxFor(model => model.Country, new { @class = "text", tabindex = "1" })</span>
                <span class="system negative">@Html.ValidationMessageFor(model => model.Country)</span>
            </div>
        </div>

        <div class="row">
            @Html.LabelFor(model => model.City)
            @Html.HiddenFor(model => model.CityID)
            <div class="inputs">
                <span class="input_wrapper">@Html.TextBoxFor(model => model.City, new { @class = "text", tabindex = "2" })</span>
                <span class="system negative">@Html.ValidationMessageFor(model => model.City)</span>
            </div>
        </div>

        <div class="row">
            @Html.LabelFor(model => model.Area)
            <div class="inputs">
                <span class="input_wrapper">@Html.TextBoxFor(model => model.Area, new { @class = "text", tabindex = "3" })</span>
                <span class="system negative">@Html.ValidationMessageFor(model => model.Area)</span>
            </div>
        </div>
        
        <div class="row">
            @Html.LabelFor(model => model.Region)
            <div class="inputs">
                <span class="input_wrapper">@Html.TextBoxFor(model => model.Region, new { @class = "text", tabindex = "4" })</span>
                <span class="system negative">@Html.ValidationMessageFor(model => model.Region)</span>
            </div>
        </div>

        <p>
            <input class="button" type="submit" value="Создать" />
        </p>
    </fieldset>
}